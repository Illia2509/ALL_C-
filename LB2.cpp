#include <iostream>  // Підключаємо бібліотеку для вводу/виводу
#include <cstdlib>   // Підключаємо бібліотеку для роботи з випадковими числами
#include <ctime>     // Підключаємо бібліотеку для отримання поточного часу

int main() {
    std::srand(std::time(0));  // Ініціалізуємо генератор випадкових чисел поточним часом
    
    int size_of_matrix = 3;  // Розмір квадратної матриці
    
    // Динамічне виділення пам'яті для матриці
    int** matrix = new int*[size_of_matrix];
    for (int i = 0; i < size_of_matrix; i++) {
        matrix[i] = new int[size_of_matrix];  // Виділяємо пам'ять для кожного рядка
    }
    
    // Заповнення матриці випадковими числами від -10 до 10
    for (int i = 0; i < size_of_matrix; i++) {
        for (int j = 0; j < size_of_matrix; j++) {
            matrix[i][j] = std::rand() % 21 - 10;  // Генеруємо числа в діапазоні [-10, 10]
            std::cout << matrix[i][j] << "\t";    // Виводимо елемент матриці
        }
        std::cout << std::endl;  // Перехід на новий рядок після заповнення кожного рядка матриці
    }
    
    int* numbers = new int[size_of_matrix];  // Динамічний масив для добутків від'ємних чисел у кожному рядку
    int list_of_numbers[3] = {};            // Статичний масив для збереження тих же значень
    
    // Обчислення добутку від'ємних чисел для кожного рядка
    for (int i = 0; i < size_of_matrix; i++) {
        numbers[i] = 1;  // Початкове значення добутку
        bool negative = false;  // Флаг, чи є у рядку від'ємні числа
        
        for (int j = 0; j < size_of_matrix; j++) {
            if (matrix[i][j] < 0) {         // Якщо елемент від'ємний
                numbers[i] *= matrix[i][j]; // Множимо його на поточний добуток
                negative = true;            // Встановлюємо флаг у true
            }
        }
        
        if (!negative) {       // Якщо у рядку немає від'ємних чисел
            numbers[i] = 0;    // Добуток дорівнює 0
        }

        list_of_numbers[i] = numbers[i];  // Зберігаємо значення в статичному масиві
        
        // Виводимо результат для поточного рядка
        std::cout << "Добуток від'ємних елементів у рядку під номером " 
                  << i + 1 << ": " << numbers[i] << std::endl;
    }

    // Вивід всього списку чисел
    std::cout << "Список чисел: ";
    for (int i = 0; i < size_of_matrix; i++) {
        std::cout << list_of_numbers[i] << " ";  // Виводимо значення масиву
    }
    std::cout << std::endl;
    
    // Звільнення пам'яті, виділеної для матриці
    for (int i = 0; i < size_of_matrix; i++) {
        delete[] matrix[i];  // Видаляємо кожний рядок
    }
    delete[] matrix;  // Видаляємо саму матрицю
    
    return 0;  // Завершення програми
}
